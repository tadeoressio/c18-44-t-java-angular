import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Interface for a class that creates an in-memory database
 *
 * Its `createDb` method creates a hash of named collections that represents the database
 *
 * For maximum flexibility, the service may define HTTP method overrides.
 * Such methods must match the spelling of an HTTP method in lower case (e.g, "get").
 * If a request has a matching method, it will be called as in
 * `get(info: requestInfo, db: {})` where `db` is the database object described above.
 */
export class InMemoryDbService {
}
/**
 * Interface for InMemoryBackend configuration options
 */
export class InMemoryBackendConfigArgs {
}
/////////////////////////////////
/**
 *  InMemoryBackendService configuration options
 *  Usage:
 *    InMemoryWebApiModule.forRoot(InMemHeroService, {delay: 600})
 *
 *  or if providing separately:
 *    provide(InMemoryBackendConfig, {useValue: {delay: 600}}),
 */
export class InMemoryBackendConfig {
    constructor(config = {}) {
        Object.assign(this, {
            // default config:
            caseSensitiveSearch: false,
            dataEncapsulation: false, // do NOT wrap content within an object with a `data` property
            delay: 500, // simulate latency by delaying response
            delete404: false, // don't complain if can't find entity to delete
            passThruUnknownUrl: false, // 404 if can't process URL
            post204: true, // don't return the item after a POST
            post409: false, // don't update existing item with that ID
            put204: true, // don't return the item after a PUT
            put404: false, // create new item if PUT item with that ID not found
            apiBase: undefined, // assumed to be the first path segment
            host: undefined, // default value is actually set in InMemoryBackendService ctor
            rootPath: undefined, // default value is actually set in InMemoryBackendService ctor
        }, config);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "0.0.0", ngImport: i0, type: InMemoryBackendConfig, deps: [{ token: InMemoryBackendConfigArgs }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "0.0.0", ngImport: i0, type: InMemoryBackendConfig }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "0.0.0", ngImport: i0, type: InMemoryBackendConfig, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: InMemoryBackendConfigArgs }] });
/** Return information (UriInfo) about a URI  */
export function parseUri(str) {
    // Adapted from parseuri package - http://blog.stevenlevithan.com/archives/parseuri
    // tslint:disable-next-line:max-line-length
    const URL_REGEX = /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;
    const m = URL_REGEX.exec(str);
    const uri = {
        source: '',
        protocol: '',
        authority: '',
        userInfo: '',
        user: '',
        password: '',
        host: '',
        port: '',
        relative: '',
        path: '',
        directory: '',
        file: '',
        query: '',
        anchor: '',
    };
    const keys = Object.keys(uri);
    let i = keys.length;
    while (i--) {
        uri[keys[i]] = (m && m[i]) || '';
    }
    return uri;
}
export function removeTrailingSlash(path) {
    return path.replace(/\/$/, '');
}
//# sourceMappingURL=data:application/json;base64,